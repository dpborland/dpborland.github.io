

function whatWasSelected(e) {
    return new Promise( (resolve, reject) => {
        let eventDataPipe = {};

        if (e.target.id !== undefined) {
            eventDataPipe.event = e;
            eventDataPipe.elementClicked = e.target;
            eventDataPipe.elementClickedId = e.target.id;
            eventDataPipe.elementClickedAlt = e.target.alt;
            eventDataPipe.startingPointX = e.touches[0].clientX;
            resolve(eventDataPipe);
        } else {
            reject(e);
        }
    }
}

function findCurrentElementOfClass(eventDataPipe, elementClassName, classToSearch) {
    let elementArray = Array.from(document.querySelectorAll("." + elementClassName));

    elementArray.findIndex( (element, index) => {
        if (element.classList.contains(classToSearch)) {
            eventDataPipe.currentIndex = index;
        }
    });

    return eventDataPipe;
}

function findNextThumbnailIndex(eventDataPipe, array) {

    if (eventDataPipe.elementClickedId === "increment") {
        eventDataPipe.currentIndex === array.length - 1 ?
            eventDataPipe.nextIndex = 0
            :
            eventDataPipe.nextIndex = currentIndex + 1;

    } else if (eventDataPipe.elementClickedId === "decrement") {
        eventDataPipe.currentIndex === 0 ?
            eventDataPipe.nextIndex = array.length - 1
            :
            eventDataPipe.nextIndex = currentIndex - 1;
    }

    return eventDataPipe;
}

function classToggler(eventDataPipe, delayTime = 0, classToToggle, ...targetElementsByClass) {

    let specificElement, elementArray;

    targetElementsByClass.forEach( (target) => {
        Array.isArray(target) ?
            (specificElement = document.querySelectorAll("." + target[0])[target[1]],
                specificElement.classList.toggle(classToToggle))
            :
            (elementArray = Array.from(document.querySelectorAll("." + target)),
                elementArray.forEach( (element) => {
                    element.classList.toggle(classToToggle);
                }))
    });

    /*targetElementsByClass.forEach( (target) => {
     if (Array.isArray(target) === true) {
     specificElement = document.querySelectorAll("." + target[0])[target[1]];
     specificElement.classList.toggle(classToToggle);
     } else {
     elementArray = Array.from(document.querySelectorAll("." + target));
     elementArray.forEach( (element) => {
     element.classList.toggle(classToToggle);
     });
     }
     })*/

    window.setTimeout( () => {
        return eventDataPipe;
    }, delayTime);
}

function changeAttribute(eventDataPipe, attr, newAttrValue, ...targetElementsByClass) {
    let specificElement, elementArray;

    targetElementsByClass.forEach( (target) => {
        Array.isArray(target) ?
            (specificElement = document.querySelectorAll("." + target[0])[target[1]],
                specificElement.setAttribute(attr, newAttrValue))
            :
            (elementArray = Array.from(document.querySelectorAll("." + target)),
                elementArray.forEach( (element) => {
                    element.setAttribute(attr, newAttrValue);
                }))
    });

    return eventDataPipe;
}

function textToggler(initialText, nextText, elementByClassName) {

    let element;
    if (Array.isArray(elementByClassName) === true) {
        element = document.querySelectorAll("." + elementByClassName[0])[elementByClassName[1]];
        element.textContent === initialText ?
            element.textContent = nextText
            :
            element.textContent = initialText
    } else {
        element = document.querySelectorAll("." + elementByClassName);
        element.forEach( (individualElement) => {
            individualElement.textContent === initialText ?
                individualElement.textContent = nextText
                :
                individualElement.textContent = initialText
        });
    }
}

function mobileSwipeControl(eventDataPipe) {
    let threshold = 100;
    let endingPointX, distanceTravelledX;

    elementClicked.addEventListener("touchend", function (eventDataPipe.event) {
        endingPointX = eventDataPipe.event.changedTouches[0].clientX;
        eventDataPipe.distanceTravelledX = endingPointX - eventDataPipe.startingPointX;
        if (Math.abs(distanceTravelledX) >= threshold) {
            distanceTravelledX > 0 ? eventDataPipe.elementClickedID = "decrement" : eventDataPipe.elementClickedID = "increment";
        }
    }, false);

    return eventDataPipe;
}

function fullScreenImg(elementByClass) {
    let img = document.querySelector("." + elementByClass);
    if (!document.fullscreenElement && !document.mozFullScreenElement &&
        !document.webkitFullscreenElement && !document.msFullscreenElement) {
        if (img.requestFullscreen) {
            img.requestFullscreen();
        }
        else if (img.msRequestFullscreen) {
            img.msRequestFullscreen();
        }
        else if (img.mozRequestFullScreen) {
            img.mozRequestFullScreen();
        }
        else if (img.webkitRequestFullscreen) {
            img.webkitRequestFullscreen(Element.ALLOW_KEYBOARD_INPUT);
        }
    }
    else {
        if (document.exitFullscreen) {
            document.exitFullscreen();
        }
        else if (document.msExitFullscreen) {
            document.msExitFullscreen();
        }
        else if (document.mozCancelFullScreen) {
            document.mozCancelFullScreen();
        }
        else if (document.webkitExitFullscreen) {
            document.webkitExitFullscreen();
        }
    }
}
